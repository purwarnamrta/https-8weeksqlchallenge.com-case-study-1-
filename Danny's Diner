-- 1. What is the total amount each customer spent at the restaurant?
SELECT
  customer_id,
  sum (price) AS total_amount_spent
FROM
  dannys_diner.sales s
  JOIN dannys_diner.menu menu ON s.product_id = menu.product_id
GROUP BY
  1
ORDER BY
  1

--2. How many days has each customer visited the restaurant?
SELECT
  customer_id,
  count(DISTINCT order_date)
FROM
  dannys_diner.sales s
GROUP BY
  1
ORDER BY
  1

--3. What was the first item from the menu purchased by each customer?
*****solution 1*******
WITH cte AS (
  SELECT
    customer_id,
    order_date,
    product_name,
    rank() over(
      PARTITION by customer_id
      ORDER BY
        order_date
    ) AS rank
  FROM
    dannys_diner.sales s
    INNER JOIN dannys_diner.menu m ON s.product_id = m.product_id
)
SELECT
  customer_id,
  product_name
FROM
  cte
WHERE
  rank = 1
  
**************Solution 2*************
SELECT
  customer_id,
  product_name
FROM
  (
    SELECT
      customer_id,
      product_name,
      s.product_id,
      order_date,
      row_number () over (
        PARTITION by customer_id
        ORDER BY
          order_date
      ) AS first_item
    FROM
      dannys_diner.sales s
      JOIN dannys_diner.menu menu ON s.product_id = menu.product_id
  ) sub
WHERE
  first_item = 1

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

 *************Soultion 1***************
 SELECT
  product_name,
  count(product_name) AS count
FROM
  dannys_diner.sales s
  INNER JOIN dannys_diner.menu m ON s.product_id = m.product_id
GROUP BY
  1
ORDER BY
  count DESC
LIMIT
  1

**********solution 2***************
 with cte as (
  SELECT
    product_name,
    count (product_name) AS Nopurchased
  FROM
    dannys_diner.sales s
    JOIN dannys_diner.menu menu ON s.product_id = menu.product_id
  GROUP BY
    1
  ORDER BY
    2 DESC
)
SELECT
  product_name,
  Nopurchased
FROM
  cte
WHERE
  Nopurchased =(
    SELECT
      max(Nopurchased)
    FROM
      cte
  )

--5. Which item was the most popular for each customer?
*************Soultion 1***************
with cte as 
(
  SELECT
    customer_id,
    product_name,
    count(product_name) AS count,
    rank() over (
      PARTITION by customer_id
      ORDER BY
        count(product_name) DESC
    ) AS rank
  FROM
    dannys_diner.sales s
    INNER JOIN dannys_diner.menu m ON s.product_id = m.product_id
  GROUP BY
    1,
    2
)
SELECT
  customer_id,
  product_name
FROM
  cte
WHERE
  rank = 1

*************Soultion 2***************
SELECT
  customer_id,
  product_name
FROM
  dannys_diner.menu menu
  JOIN (
    SELECT
      customer_id,
      max(times_ordered) AS maxi
    FROM
      (
        SELECT
          customer_id,
          product_id,
          count(*) AS times_ordered
        FROM
          dannys_diner.sales
        GROUP BY
          1,
          2
      ) sub
    GROUP BY
      1
    ORDER BY
      1
  ) sub1 ON menu.product_id = sub1.maxi
ORDER BY
  1
  



-- 6. Which item was purchased first by the customer after they became a member?
**********solution 1*****************
WITH cte AS (
  SELECT
    s.customer_id,
    order_date,
    join_date,
    product_name,
    rank() over(
      PARTITION by s.customer_id
      ORDER BY
        order_date ASC
    ) AS rank
  FROM
    dannys_diner.sales s
    INNER JOIN dannys_diner.menu m ON s.product_id = m.product_id
    INNER JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
  WHERE
    order_date >= join_date
)
SELECT
  customer_id,
  product_name
FROM
  cte
WHERE
  rank = 1
  
**********solution 2*****************
SELECT
  customer_id,
  product_name
FROM
  (
    SELECT
      s.customer_id,
      menu.product_name,
      rank () over(
        PARTITION by mem.customer_id
        ORDER BY
          s.order_date
      )
    FROM
      dannys_diner.sales s
      JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
      JOIN dannys_diner.menu menu ON s.product_id = menu.product_id
    WHERE
      order_date >= join_date
  ) sub
WHERE
  rank = 1

--7. Which item was purchased just before the customer became a member?
***********solution 1***************
WITH cte AS (
  SELECT
    s.customer_id,
    order_date,
    join_date,
    product_name,
    rank() over(
      PARTITION by s.customer_id
      ORDER BY
        order_date DESC
    ) AS rank
  FROM
    dannys_diner.sales s
    INNER JOIN dannys_diner.menu m ON s.product_id = m.product_id
    INNER JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
  WHERE
    order_date < join_date
)
SELECT
  customer_id,
  product_name
FROM
  cte
WHERE
  rank = 1

***************solution2*****************
SELECT
  customer_id,
  product_name
FROM
  (
    SELECT
      s.customer_id,
      menu.product_name,
      order_date,
      rank () over(
        PARTITION by mem.customer_id
        ORDER BY
          s.order_date DESC
      )
    FROM
      dannys_diner.sales s
      JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
      JOIN dannys_diner.menu menu ON s.product_id = menu.product_id
    WHERE
      order_date < join_date
  ) sub
WHERE
  rank = 1


-- 8. What is the total items and amount spent for each member before they became a member?
***************solution 1*****************
SELECT
  s.customer_id,
  count(product_name),
  sum(price)
FROM
  dannys_diner.sales s
  INNER JOIN dannys_diner.menu m ON s.product_id = m.product_id
  INNER JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
WHERE
  order_date < join_date
GROUP BY
  1
ORDER BY
  1

****************solution 2***************
SELECT
  s.customer_id,
  count(product_name) AS total_items,
  sum(price) AS amount_spent
FROM
  dannys_diner.sales s
  JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
  JOIN dannys_diner.menu menu ON s.product_id = menu.product_id
WHERE
  order_date < join_date
GROUP BY
  1
ORDER BY
  1

--9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
************Solution 1***************
SELECT
  customer_id,
  sum(
    CASE
      WHEN product_name = 'sushi' THEN price * 2 * 10
      ELSE price * 10
    END
  ) AS points
FROM
  dannys_diner.sales s
  INNER JOIN dannys_diner.menu m ON s.product_id = m.product_id
GROUP BY
  1
ORDER BY
  1

************ssolution 2***************
SELECT
  customer_id,
  sum (meal_points)
FROM
  (
    SELECT
      customer_id,
      product_name,
      price,
      CASE
        WHEN product_name IN ('curry', 'ramen') THEN menu.price * 10
        WHEN product_name = 'sushi' THEN menu.price * 20
        ELSE NULL
      END AS meal_points
    FROM
      dannys_diner.sales s
      JOIN dannys_diner.menu menu ON s.product_id = menu.product_id
  ) sub
GROUP BY
  1
ORDER BY
  1

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
***********solution1*****************
SELECT
  s.customer_id,
  sum (
    CASE
      WHEN order_date BETWEEN join_date
      AND join_date + 6 THEN price * 20
      WHEN product_name = 'sushi' THEN price * 10 * 2
      ELSE price * 10
    END
  ) AS points
FROM
  dannys_diner.sales s
  INNER JOIN dannys_diner.menu m ON s.product_id = m.product_id
  INNER JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
WHERE
  DATE_TRUNC('month', S.order_date) = '2021-01-01'
GROUP BY
  1
ORDER BY
  1

***********solution2*****************
SELECT
  customer_id,
  sum(Total_Jan) AS points
FROM
  (
    SELECT
      sub.customer_id,
      price,
      day_orderdate,
      day_joindate,
      CASE
        WHEN order_date < join_date + 7 THEN price * 20
        ELSE NULL
      END AS Total_Jan
    FROM
      (
        SELECT
          s.customer_id,
          order_date,
          product_name,
          price,
          join_date,
          extract (
            DAY
            FROM
              order_date
          ) AS day_orderdate,
          extract (
            DAY
            FROM
              join_date
          ) AS day_joindate
        FROM
          dannys_diner.sales s
          JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
          JOIN dannys_diner.menu menu ON s.product_id = menu.product_id
        WHERE
          order_date >= join_date
      ) sub
    ORDER BY
      sub.customer_id
  ) sub1
GROUP BY
  1


Bonus Question-1
SELECT
  s.customer_id,
  order_date,
  product_name,
  price,
  CASE
    WHEN order_date < join_date THEN 'N'
    ELSE 'Y'
  END AS member
FROM
  dannys_diner.sales s
  INNER JOIN dannys_diner.menu m ON s.product_id = m.product_id
  INNER JOIN dannys_diner.members mem ON s.customer_id = mem.customer_id
ORDER BY
  s.customer_id,
  order_date

